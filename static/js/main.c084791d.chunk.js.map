{"version":3,"sources":["THA-22/Temp.jsx","THA-22/Meme.jsx","THA-22/App.jsx","index.js"],"names":["Temp","temp","setMeme","className","map","temps","onClick","style","backgroundImage","url","id","Meme","meme","useState","template_id","username","password","boxes","form","setForm","src","alt","Array","box_count","_","index","type","placeholder","onChange","e","newBox","text","target","value","title","box","console","log","fetch","then","res","json","data","success","alert","xhr","XMLHttpRequest","open","responseType","onload","imageUrl","window","URL","webkitURL","createObjectURL","this","response","tag","document","createElement","href","download","body","appendChild","click","removeChild","send","App","setTemp","useEffect","memes","ReactDOM","render","getElementById"],"mappings":"kLAmBeA,EAlBF,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,QAClB,OACI,qBAAKC,UAAU,YAAf,SACKF,EAAKG,KAAI,SAAAC,GAAK,OACX,qBACIF,UAAU,WACVG,QAAS,WACLJ,EAAQG,IAHhB,SAMI,qBAAKE,MAAO,CAAEC,gBAAgB,OAAD,OAASH,EAAMI,IAAf,MAAyBN,UAAU,UAN1DE,EAAMK,U,cC4EjBC,EA9EF,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,KAAMV,EAAc,EAAdA,QAClB,EAAwBW,mBAAS,CAC7BC,YAAaF,EAAKF,GAClBK,SAAU,YACVC,SAAU,WACVC,MAAO,KAJX,mBAAOC,EAAP,KAAaC,EAAb,KA+CA,OACI,sBAAKhB,UAAU,WAAf,UACI,qBAAKiB,IAAKR,EAAKH,IAAKY,IAAI,SAExB,8BACK,YAAIC,MAAMV,EAAKW,YAAYnB,KAAI,SAACoB,EAAGC,GAAJ,OAC5B,uBAEIC,KAAK,OACLC,YAAW,uBAAkBF,EAAQ,GACrCG,SAAU,SAACC,GAEP,IAAMC,EAASZ,EAAKD,MACpBa,EAAOL,GAAS,CAAEM,KAAMF,EAAEG,OAAOC,OACjCd,EAAQ,2BAAKD,GAAN,IAAYD,MAAOa,OAPzBL,QAajB,sBAAKtB,UAAU,OAAf,UACI,qCAAO,wBAAQA,UAAU,UAAU+B,MAAM,OAAO5B,QAAS,WAAQJ,EAAQ,OAAlE,qBACP,+BAAM,wBAAQC,UAAU,iBAAiBG,QA7DhC,WACjB,IAAIG,EAAG,4DAAwDS,EAAKJ,YAA7D,qBAAqFI,EAAKH,SAA1F,qBAA+GG,EAAKF,UAC3HE,EAAKD,MAAMb,KAAI,SAAC+B,EAAKV,GACjB,OAAQhB,GAAG,iBAAegB,EAAf,mBAA+BU,EAAIJ,SAElDK,QAAQC,IAAI5B,GACZ6B,MAAM7B,GAAK8B,MAAK,SAACC,GAAD,OAASA,EAAIC,UACxBF,MAAK,SAACG,IACkB,IAAjBA,EAAKC,QACLzC,EAAQ,2BAAKU,GAAN,IAAYH,IAAKiC,EAAKA,KAAKjC,OAGlCmC,MAAM,uBAiDJ,6BACN,+BAAM,wBAAQzC,UAAU,iBAAiBG,QAxCrD,WACI,IAAIuC,EAAM,IAAIC,eACVrC,EAAMG,EAAKH,IACfoC,EAAIE,KAAK,MAAOtC,GAAK,GACrBoC,EAAIG,aAAe,OACnBH,EAAII,OAAS,WACT,IACIC,GADaC,OAAOC,KAAOD,OAAOE,WACZC,gBAAgBC,KAAKC,UAC3CC,EAAMC,SAASC,cAAc,KACjCF,EAAIG,KAAOV,EACXO,EAAII,SAAW,OACfH,SAASI,KAAKC,YAAYN,GAC1BA,EAAIO,QACJN,SAASI,KAAKG,YAAYR,IAE9BZ,EAAIqB,QAyBU,2BClDPC,EAlBH,WACR,MAAwBtD,mBAAS,IAAjC,mBAAOZ,EAAP,KAAamE,EAAb,KACA,EAAwBvD,mBAAS,MAAjC,mBAAOD,EAAP,KAAaV,EAAb,KAQA,OAPAmE,qBAAU,WACN/B,MAAM,qCACDC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACH0B,EAAQ1B,EAAKA,KAAK4B,YAE3B,IAEC,sBAAKnE,UAAU,MAAf,UACI,gDACU,OAATS,EAAiB,cAAC,EAAD,CAAMX,KAAMA,EAAMC,QAASA,IAAgB,cAAC,EAAD,CAAMU,KAAMA,EAAMV,QAASA,QCZpGqE,IAASC,OAAO,cAAC,EAAD,IAASd,SAASe,eAAe,W","file":"static/js/main.c084791d.chunk.js","sourcesContent":["// import { useState, useEffect } from \"react\";\r\nconst Temp = ({ temp, setMeme }) => {\r\n    return (\r\n        <div className=\"Templates\">\r\n            {temp.map(temps => (\r\n                <div key={temps.id}\r\n                    className=\"template\"\r\n                    onClick={() => {\r\n                        setMeme(temps)\r\n                        // console.log(setMeme);\r\n                    }}>\r\n                    <div style={{ backgroundImage: `url(${temps.url})` }} className=\"meme\">\r\n\r\n                    </div>\r\n                </div>\r\n            ))}\r\n        </div>);\r\n}\r\n\r\nexport default Temp;\r\n","import { useState } from \"react\";\r\n// import { useDispatch } from \"react-redux\";\r\n\r\nconst Meme = ({ meme, setMeme }) => {\r\n    const [form, setForm] = useState({\r\n        template_id: meme.id,\r\n        username: \"RituGupta\",\r\n        password: \"Ritu@123\",\r\n        boxes: [],\r\n\r\n    });\r\n\r\n    const generatememe = () => {\r\n        let url = `https://api.imgflip.com/caption_image?template_id=${form.template_id}&username=${form.username}&password=${form.password}`;\r\n        form.boxes.map((box, index) => {\r\n            return (url += (`&boxes[${index}][text]=${box.text}`));\r\n        });\r\n        console.log(url)\r\n        fetch(url).then((res) => res.json())\r\n            .then((data) => {\r\n                if (data.success === true) {\r\n                    setMeme({ ...meme, url: data.data.url })\r\n\r\n                } else {\r\n                    alert(\"Enter Some Text\");\r\n                }\r\n\r\n            })\r\n    }\r\n\r\n    // const save = () => {\r\n\r\n    //     console.log(meme.url);\r\n    // }\r\n    function save() {\r\n        var xhr = new XMLHttpRequest();\r\n        var url = meme.url;\r\n        xhr.open(\"GET\", url, true);\r\n        xhr.responseType = \"blob\";\r\n        xhr.onload = function () {\r\n            var urlCreator = window.URL || window.webkitURL;\r\n            var imageUrl = urlCreator.createObjectURL(this.response);\r\n            var tag = document.createElement('a');\r\n            tag.href = imageUrl;\r\n            tag.download = \"meme\";\r\n            document.body.appendChild(tag);\r\n            tag.click();\r\n            document.body.removeChild(tag);\r\n        }\r\n        xhr.send();\r\n    }\r\n    return (\r\n        <div className=\"memebnao\">\r\n            <img src={meme.url} alt=\"meme\"></img>\r\n\r\n            <div>\r\n                {[...Array(meme.box_count)].map((_, index) => (\r\n                    <input\r\n                        key={index}\r\n                        type=\"text\"\r\n                        placeholder={`meme caption-${index + 1}`}\r\n                        onChange={(e) => {\r\n\r\n                            const newBox = form.boxes;\r\n                            newBox[index] = { text: e.target.value };\r\n                            setForm({ ...form, boxes: newBox });\r\n                        }}>\r\n\r\n                    </input>))}\r\n            </div>\r\n\r\n            <div className=\"btns\">\r\n                <span> <button className=\"backbtn\" title=\"Back\" onClick={() => { setMeme(null) }}>Back</button></span>\r\n                <span><button className=\"generatebutton\" onClick={generatememe}>Generate Meme</button></span>\r\n                <span><button className=\"generatebutton\" onClick={save} >Save</button></span>\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Meme;","import React from \"react\";\r\nimport \"./style.css\"\r\nimport Temp from \"./Temp\"\r\nimport Meme from \"./Meme\"\r\nimport { useState, useEffect } from \"react\";\r\n\r\nconst App = () => {\r\n    const [temp, setTemp] = useState([]);\r\n    const [meme, setMeme] = useState(null);\r\n    useEffect(() => {\r\n        fetch(\"https://api.imgflip.com/get_memes\")\r\n            .then((res) => res.json())\r\n            .then((data) => {\r\n                setTemp(data.data.memes);\r\n            })\r\n    }, []);\r\n    return (\r\n        <div className=\"App\">\r\n            <h1>Meme Generator</h1>\r\n            {meme === null ? (<Temp temp={temp} setMeme={setMeme} />) : (<Meme meme={meme} setMeme={setMeme} />)}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./THA-22/App\"\r\n\r\n\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}